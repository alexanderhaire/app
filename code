from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.screenmanager import ScreenManager, Screen

# Simulated user database
user_db = {"admin": "password"}
current_user = {"username": None}  # Track the currently logged-in user
user_pools = {}  # Track pools created by each user

# Fixed platform rake value for all users
FIXED_PLATFORM_RAKE = 0.05

# Function to calculate odds
def calculate_odds(bets, user_rake=0.15, platform_rake=FIXED_PLATFORM_RAKE):
    total_rake = user_rake + platform_rake
    total_pool = sum(bets.values())
    pool_after_rake = total_pool * (1 - total_rake)

    odds = {}
    for participant, bet_amount in bets.items():
        if bet_amount > 0:
            payout_pool = pool_after_rake
            odds[participant] = (payout_pool / bet_amount) - 1
        else:
            odds[participant] = float('inf')

    formatted_odds = {
        k: f"{v:.2f}x" if v != float('inf') else "No Bets"
        for k, v in odds.items()
    }
    return formatted_odds

# Login Screen
class LoginScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        layout.add_widget(Label(text="Login to Betting App", font_size=24))
        
        self.username = TextInput(hint_text="Username", multiline=False)
        self.password = TextInput(hint_text="Password", password=True, multiline=False)
        layout.add_widget(self.username)
        layout.add_widget(self.password)
        
        login_button = Button(text="Login", size_hint=(1, 0.2))
        login_button.bind(on_press=self.validate_login)
        layout.add_widget(login_button)
        
        create_account_button = Button(text="Create Account", size_hint=(1, 0.2))
        create_account_button.bind(on_press=self.go_to_create)
        layout.add_widget(create_account_button)
        
        self.error_label = Label(text="", color=(1, 0, 0, 1))
        layout.add_widget(self.error_label)
        self.add_widget(layout)
    
    def validate_login(self, instance):
        if self.username.text in user_db and self.password.text == user_db[self.username.text]:
            current_user["username"] = self.username.text
            if self.username.text not in user_pools:
                user_pools[self.username.text] = []  # Initialize user pools
            self.manager.current = "home"
        else:
            self.error_label.text = "Invalid username or password."
    
    def go_to_create(self, instance):
        self.manager.current = "create"

# Create Account Screen
class CreateAccountScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        layout.add_widget(Label(text="Create an Account", font_size=24))
        
        self.new_username = TextInput(hint_text="New Username", multiline=False)
        self.new_password = TextInput(hint_text="New Password", password=True, multiline=False)
        layout.add_widget(self.new_username)
        layout.add_widget(self.new_password)
        
        create_button = Button(text="Create Account", size_hint=(1, 0.2))
        create_button.bind(on_press=self.create_account)
        layout.add_widget(create_button)
        
        back_button = Button(text="Back to Login", size_hint=(1, 0.2))
        back_button.bind(on_press=self.go_back)
        layout.add_widget(back_button)
        
        self.message_label = Label(text="", color=(0, 1, 0, 1))
        layout.add_widget(self.message_label)
        self.add_widget(layout)
    
    def create_account(self, instance):
        username = self.new_username.text.strip()
        password = self.new_password.text.strip()
        if username and password:
            if username not in user_db:
                user_db[username] = password
                user_pools[username] = []  # Initialize pools for new user
                self.message_label.text = "Account created successfully!"
            else:
                self.message_label.text = "Username already exists."
        else:
            self.message_label.text = "Username and password cannot be empty."
    
    def go_back(self, instance):
        self.manager.current = "login"

# Home Screen
class HomeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        layout.add_widget(Label(text="Welcome!", font_size=24))
        
        create_pool_button = Button(text="Create Pool", size_hint=(1, 0.2))
        create_pool_button.bind(on_press=self.go_to_create_pool)
        layout.add_widget(create_pool_button)
        
        user_profile_button = Button(text="Go to User Profile", size_hint=(1, 0.2))
        user_profile_button.bind(on_press=self.go_to_user_profile)
        layout.add_widget(user_profile_button)
        
        self.add_widget(layout)
    
    def go_to_create_pool(self, instance):
        self.manager.current = "odds"
    
    def go_to_user_profile(self, instance):
        self.manager.current = "profile"

# User Profile Screen
class UserProfileScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        layout.add_widget(Label(text="User Profile", font_size=24))

        # Buttons for Details, Pools Generated, and Achievements
        details_button = Button(text="Details", size_hint=(1, 0.2))
        details_button.bind(on_press=self.show_details)
        layout.add_widget(details_button)

        pools_button = Button(text="Pools Generated", size_hint=(1, 0.2))
        pools_button.bind(on_press=self.show_pools)
        layout.add_widget(pools_button)

        achievements_button = Button(text="Achievements", size_hint=(1, 0.2))
        achievements_button.bind(on_press=self.show_achievements)
        layout.add_widget(achievements_button)

        # Back button to return to Home Screen
        back_button = Button(text="Back to Home", size_hint=(1, 0.2))
        back_button.bind(on_press=self.go_back_home)
        layout.add_widget(back_button)

        # Display area
        self.output_label = Label(text="Select an option above", font_size=18)
        layout.add_widget(self.output_label)

        self.add_widget(layout)

    def show_details(self, instance):
        self.output_label.text = f"Username: {current_user.get('username', 'Guest')}\nAccount Type: Standard"

    def show_pools(self, instance):
        pools = user_pools.get(current_user.get("username"), [])
        if pools:
            self.output_label.text = "Pools Generated:\n" + "\n".join(pools)
        else:
            self.output_label.text = "Pools Generated:\nNo pools yet."

    def show_achievements(self, instance):
        self.output_label.text = "Achievements:\n1. First Bet Placed\n2. High Roller\n3. Consistent Winner"

    def go_back_home(self, instance):
        self.manager.current = "home"

# Screen for Placing Bets on Pool Members
class BettingScreen(Screen):
    def __init__(self, pool_details, **kwargs):
        super().__init__(**kwargs)
        self.pool_details = pool_details  # Participants in the pool
        self.bets = {}  # Store bet amounts for each participant

        self.layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        self.layout.add_widget(Label(text="Place Your Bets", font_size=24))

        # Input fields for placing bets on each participant
        self.bet_inputs = {}
        for participant in self.pool_details:
            label = Label(text=f"Bet on {participant} ($):", font_size=18)
            self.layout.add_widget(label)

            bet_input = TextInput(hint_text="Enter bet amount", multiline=False)
            self.bet_inputs[participant] = bet_input
            self.layout.add_widget(bet_input)

        # Button to submit bets
        submit_button = Button(text="Submit Bets", size_hint=(1, 0.2))
        submit_button.bind(on_press=self.submit_bets)
        self.layout.add_widget(submit_button)

        self.output_label = Label(text="", font_size=16)
        self.layout.add_widget(self.output_label)

        # Back button to return to Home Screen
        back_button = Button(text="Back to Home", size_hint=(1, 0.2))
        back_button.bind(on_press=self.go_back_home)
        self.layout.add_widget(back_button)

        self.add_widget(self.layout)

    def submit_bets(self, instance):
        try:
            # Collect and validate bets
            total_bets = 0
            for participant, input_field in self.bet_inputs.items():
                bet = float(input_field.text.strip() or 0)
                if bet < 0:
                    raise ValueError("Bets cannot be negative.")
                self.bets[participant] = bet
                total_bets += bet

            if total_bets == 0:
                raise ValueError("You must place at least one bet.")

            # Display summary of bets
            summary = "\n".join([f"{k}: ${v}" for k, v in self.bets.items()])
            self.output_label.text = f"Bets Placed Successfully:\n{summary}"
        except ValueError as e:
            self.output_label.text = f"Error: {str(e)}"

    def go_back_home(self, instance):
        self.manager.current = "home"

# Updated PoolSummaryScreen to navigate to BettingScreen
class PoolSummaryScreen(Screen):
    def __init__(self, pool_details, **kwargs):
        super().__init__(**kwargs)
        self.pool_details = pool_details  # Dictionary of participants and their bet amounts

        layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        layout.add_widget(Label(text="Pool Summary", font_size=24))

        # Display each participant and the money placed on them
        for participant, amount in self.pool_details.items():
            layout.add_widget(Label(text=f"{participant}: ${amount}", font_size=18))

        # Button to proceed to the Betting Screen
        bet_button = Button(text="Place Bets", size_hint=(1, 0.2))
        bet_button.bind(on_press=self.go_to_betting)
        layout.add_widget(bet_button)

        # Back button to return to the Home Screen
        back_button = Button(text="Back to Home", size_hint=(1, 0.2))
        back_button.bind(on_press=self.go_back_home)
        layout.add_widget(back_button)

        self.add_widget(layout)

    def go_to_betting(self, instance):
        # Navigate to the BettingScreen with the current pool details
        self.manager.add_widget(BettingScreen(self.pool_details, name="betting"))
        self.manager.current = "betting"

    def go_back_home(self, instance):
        self.manager.current = "home"

# Update PoolNamingScreen to navigate to PoolSummaryScreen
class PoolNamingScreen(Screen):
    def __init__(self, pool_size, **kwargs):
        super().__init__(**kwargs)
        self.pool_size = pool_size
        self.participant_names = []

        self.layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        self.layout.add_widget(Label(text="Name Your Participants", font_size=20))

        # Dynamically create TextInputs for each participant
        self.name_inputs = []
        for i in range(self.pool_size):
            input_field = TextInput(hint_text=f"Participant {i + 1} Name", multiline=False)
            self.layout.add_widget(input_field)
            self.name_inputs.append(input_field)

        # Submit button to finalize participant names
        submit_button = Button(text="Submit", size_hint=(1, 0.2))
        submit_button.bind(on_press=self.submit_names)
        self.layout.add_widget(submit_button)

        self.output_label = Label(text="", font_size=16)
        self.layout.add_widget(self.output_label)

        # Back button to return to the pool size screen
        back_button = Button(text="Back to Pool Size", size_hint=(1, 0.2))
        back_button.bind(on_press=self.go_back)
        self.layout.add_widget(back_button)

        self.add_widget(self.layout)

    def submit_names(self, instance):
        # Collect names from the input fields
        self.participant_names = [input_field.text.strip() or f"Participant {i + 1}" 
                                  for i, input_field in enumerate(self.name_inputs)]

        # Generate pool details with default bet amounts
        pool_details = {name: 100 for name in self.participant_names}  # Assign default $100 bets

        # Save the pool for the user
        pool_name = f"Pool {len(user_pools[current_user['username']]) + 1}"
        user_pools[current_user['username']].append(pool_name)

        # Add PoolSummaryScreen to the ScreenManager
        self.manager.add_widget(PoolSummaryScreen(pool_details, name="summary"))
        self.manager.current = "summary"

    def go_back(self, instance):
        self.manager.current = "odds"
class OddsCalculatorScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        layout.add_widget(Label(text="Enter Pool Size", font_size=20))

        # Input for defining the number of participants in the pool
        self.pool_size_input = TextInput(hint_text="Enter number of participants (e.g., 5)", multiline=False)
        layout.add_widget(self.pool_size_input)

        # Button to proceed to the naming screen
        next_button = Button(text="Next", size_hint=(1, 0.2))
        next_button.bind(on_press=self.proceed_to_naming)
        layout.add_widget(next_button)

        back_button = Button(text="Back to Home", size_hint=(1, 0.2))
        back_button.bind(on_press=self.go_back_home)
        layout.add_widget(back_button)

        self.output = Label(text="", font_size=18)
        layout.add_widget(self.output)
        self.add_widget(layout)

    def proceed_to_naming(self, instance):
        try:
            pool_size = int(self.pool_size_input.text)
            if pool_size <= 0:
                raise ValueError("Pool size must be greater than 0.")
            # Go to the PoolNamingScreen with the specified pool size
            self.manager.add_widget(PoolNamingScreen(pool_size, name="naming"))
            self.manager.current = "naming"
        except ValueError as e:
            self.output.text = f"Error: {str(e)}"

    def go_back_home(self, instance):
        self.manager.current = "home"


# Update Screen Manager
class BettingApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(LoginScreen(name="login"))
        sm.add_widget(CreateAccountScreen(name="create"))
        sm.add_widget(HomeScreen(name="home"))
        sm.add_widget(OddsCalculatorScreen(name="odds"))
        sm.add_widget(UserProfileScreen(name="profile"))
        return sm


if __name__ == "__main__":
    BettingApp().run()
